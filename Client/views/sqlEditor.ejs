<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= data.questionName %></title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/codemirror@5.59.0/lib/codemirror.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/codemirror@5.59.0/theme/monokai.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.59.0/theme/material-darker.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.59.0/theme/seti.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.59.0/theme/neat.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.0/lib/codemirror.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.0/mode/sql/sql.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Jost:wght@100;200;300;400;500;600;700;800;900&family=Poppins:wght@100;200;300;400;500;600;700;800;900&family=Silkscreen&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone|Material+Icons+Round|Material+Icons+Sharp"
      rel="stylesheet"
    />
    <style>
      html {
        scroll-behavior: smooth;
      }
      ::-webkit-scrollbar {
        width: 0.65vw;
      }
      ::-webkit-scrollbar-track {
        border-radius: 10px;
        background: transparent;
      }
      ::-webkit-scrollbar-thumb {
        background: rgb(155, 155, 155);
        border-radius: 0.5vw;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: rgb(110, 110, 110);
      }
      body {
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        margin: 0;
        padding: 0;
        color: rgb(37, 37, 37);
        background: white;
      }
      .main {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .left {
        flex-basis: 45%;
        box-sizing: border-box;
        padding: 20px;
        font-family: poppins;
        height: 100vh;
        max-height: 100vh;
        position: relative;
        overflow: auto;
        border-right: 0.5mm solid rgba(36, 36, 36, 0.171);
      }
      .right {
        flex-basis: 55%;
        box-sizing: border-box;
        height: 100vh;
        max-height: 100vh;
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        overflow: auto;
      }
      .top {
        width: 100%;
        flex-grow: 1;
        flex-basis: 55%;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        overflow: auto;
      }
      .top-head {
        width: 100%;
        padding: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-sizing: border-box;
        height: fit-content;
        border-bottom: 0.5mm solid rgba(36, 36, 36, 0.171);
        position: relative;
      }
      .top-title {
        font-family: silkscreen;
        font-size: x-large;
      }
      .top-setting {
        width: fit-content;
        position: absolute;
        height: fit-content;
        right: 10px;
        top: 110%;
        box-sizing: border-box;
        padding: 25px 15px;
        display: none;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: flex-start;
        justify-content: space-evenly;
        background: white;
        z-index: 9999;
        box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,
          rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;
        border-radius: 2mm;
        border: 1px solid rgba(0, 0, 0, 0.148);
        transition: 0.35s;
      }
      .top-setting label {
        font-family: poppins;
        margin-left: 10px;
        font-size: small;
        font-weight: 500;
      }

      .edit {
        flex-grow: 1;
        width: 100%;
        overflow: auto;
      }
      .CodeMirror {
        height: 100% !important;
      }
      #code-input {
        width: 100%;
        height: 100%;
        flex-grow: 1;
      }
      pre {
        width: 100%;
        flex-grow: 1;
        height: 100%;
      }
      code {
        width: 100%;
        margin: 0;
        padding: 0;
      }
      .bottom {
        width: 100%;
        border-top: 0.5mm solid rgba(36, 36, 36, 0.171);
        flex-grow: 1;
        flex-basis: 45%;
        box-sizing: border-box;
        overflow: auto;
      }
      .qhead {
        font-family: jost;
        font-size: x-large;
        word-wrap: break-word;
        margin-bottom: 50px;
      }
      .qbody {
        text-align: justify;
      }
      table thead td {
        font-weight: bold;
      }
      table,
      td,
      th {
        border: 0.5mm solid rgba(36, 36, 36, 0.171);
      }

      table {
        text-align: center;
        width: 100%;
        border-collapse: collapse;
      }
      .label {
        font-weight: 500;
        text-decoration: underline;
        margin-top: 40px;
      }
      td,
      th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
      }
      .inout {
        background: rgba(36, 36, 36, 0.03);
        border: 0.5mm solid rgba(36, 36, 36, 0.171);
        border-radius: 1mm;
        box-sizing: border-box;
        padding: 5px;
        white-space: pre-line;
      }
      .bot-head {
        width: 100%;
        height: fit-content;
        box-sizing: border-box;
        padding: 5px 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-family: poppins;
        border-bottom: 0.5mm solid rgba(36, 36, 36, 0.171);
      }
      .status {
        display: inline-flex;
        align-items: center;
        justify-content: center;
      }
      .statusName {
        font-size: small;
        margin-right: 10px;
      }
      .statusVal {
        font-size: small;
        font-weight: 600;
      }
      .btns {
        display: inline-flex;
        align-items: center;
      }
      .btns button {
        border: none;
        font-size: small;
        padding: 4px 8px;
        border: 0.5mm solid rgb(39, 39, 39);
        background: white;
        outline: none;
        cursor: pointer;
        font-family: poppins;
        color: black;
        margin: 0 20px;
        margin-right: 0;
        transition: 0.25s;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
      }
      .btns button span {
        font-size: large;
        margin-left: 5px;
      }
      .btns button:hover {
        box-shadow: 5px 5px 0 rgb(81, 81, 81);
      }
      .output {
        font-family: poppins;
        margin-top: 20px;
        margin-bottom: 10px;
      }
      .collapsible {
        background-color: rgb(39, 39, 39);
        color: white;
        cursor: pointer;
        padding: 8px 15px;
        width: 95%;
        margin: auto;
        display: block;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
        font-family: poppins;
        border: 0.5mm solid rgba(36, 36, 36, 0.171);
        border-radius: 1mm;
      }

      .active,
      .collapsible:hover {
        background-color: rgb(17, 17, 17);
      }

      .collapsible:after {
        content: "\002B";
        font-weight: bold;
        float: right;
        margin-left: 5px;
      }

      .active:after {
        content: "\2212";
      }

      .content {
        width: 90%;
        margin: auto;
        padding: 0 18px;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
        background-color: #f1f1f1;
        font-size: 14px;
        overflow: auto;
      }
      .content table,
      .content th,
      .content td {
        border: none !important;
        text-align: left !important;
      }
      .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 9999; /* Sit on top */
        /* Location of the box */
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0, 0, 0); /* Fallback color */
        background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
      }

      /* Modal Content */
      .modal-content {
        background-color: rgb(255, 255, 255);
        margin: auto;
        border: 1px solid #888;
        width: 300px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-family: poppins;
        border-radius: 4mm;
        padding: 25px;
        text-align: center;
        padding-bottom: 35px;
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
      }
      @-webkit-keyframes animatetop {
        from {
          top: -500px;
          opacity: 0;
        }
        to {
          top: 0;
          opacity: 1;
        }
      }

      @keyframes animatetop {
        from {
          top: -500px;
          opacity: 0;
        }
        to {
          top: 0;
          opacity: 1;
        }
      }
      .modal-content p {
        font-size: 14px;
        margin: 0;
      }
      .modal-head {
        width: 100%;
        box-sizing: border-box;
        padding: 10px;
        font-family: poppins;
        font-size: large;
        font-weight: 600;
        text-align: center;
        letter-spacing: 1px;
      }
      /* The Close Button */
      .close {
        color: rgb(58, 58, 58);
        float: right;
        font-size: small;
        font-weight: 600;
        font-weight: bold;
        position: absolute;
        bottom: 10px;
        right: 15px;
      }

      .close:hover,
      .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
      }
      .icon {
        display: block;
        margin: auto;
        font-size: 40px;
      }
      .modal-value {
        font-weight: 500;
      }
      .forms {
        position: relative;
        display: flex;
        height: fit-content;
        margin: 10px 0;
      }
      .forms label {
        width: fit-content;
        height: fit-content;
        box-sizing: border-box;
        display: block;
      }
      .forms label span {
        padding: 10px;
        border: 1px solid rgba(61, 61, 61, 0.66);
        background: #ffffff;
        position: relative;
        z-index: 10;
        color: black;
        width: fit-content;
        height: fit-content;
        box-sizing: border-box;
        display: inline-flex;
        white-space: nowrap;
      }
      .forms label span:hover {
        background: #ddd;
      }
      .forms label:first-of-type span {
        border-radius: 6mm 0 0 6mm;
      }
      .forms label:last-of-type span {
        border-radius: 0 6mm 6mm 0;
      }
      .forms input[type="radio"] {
        filter: alpha(opacity=0);
        -moz-opacity: 0;
        -khtml-opacity: 0;
        opacity: 0;
        width: 0;
        padding: 0;
        height: 0;
        margin: 0 -15px 0 0;
      }
      .forms label input[type="radio"]:checked + span {
        background: rgb(45, 45, 45);
        color: white;
      }
      input[type="submit"] {
        position: absolute;
        top: -1.8em;
        display: block;
        padding: 2em 4em 2em 10em;
        z-index: 1;
        border: 0;
        line-height: 0.95em;
        border-radius: 1em;
        right: 10px;
        -webkit-transition: all 0.25s ease-in-out;
        opacity: 0;
      }
      input[type="submit"]:hover {
        background: green;
      }
      label.checked ~ input[type="submit"] {
        right: -10em;
        opacity: 1;
      }
      .set-btn {
        background: none;
        border: none;
        outline: none;
        cursor: pointer;
      }
      .form-label {
        font-size: medium;
        font-family: poppins;
        margin: auto 0;
        margin-right: 15px;
        font-weight: 500;
        min-width: 65px;
        color: black;
      }
      .set-close {
        position: absolute;
        right: 5px;
        top: 5px;
        width: 25px;
        height: 25px;
        line-height: 25px;
        text-align: center;
        border-radius: 50%;
        background: none;
        outline: none;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
      }
      .set-close span {
        text-align: center;
        font-size: xx-large;
        color: rgb(31, 31, 31);
      }
      .loader-back {
        background: white;
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        display: none;
      }
      .loader {
        border: 4px solid #f3f3f3; /* Light grey */
        border-top: 4px solid #2f2f2f; /* Blue */
        border-radius: 50%;
        width: 10px;
        height: 10px;
        animation: spin 2s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body>
    <section class="main">
      <div class="left">
        <div class="qhead"><%= data.questionName %></div>
        <div class="qbody">
          <p><%= data.questionDescriptionText %></p>
          <table>
            <thead>
              <th>Field</th>
              <th>Type</th>
            </thead>
            <tbody id="schema"></tbody>
          </table>
          <p class="label">Sample Input</p>
          <div id="inputHtml"><%= data.questionExampleInput %></div>
          <script>
            let place = document.getElementById("inputHtml");
            let s = place.innerText;
            place.innerText = "";
            place.innerHTML = s;
          </script>
          <p class="label">Sample Output</p>
          <div class="inout"><%= data.questionExampleOutput %></div>
        </div>
      </div>
      <div class="right">
        <div class="top">
          <div class="top-head">
            <div class="top-title">BuildIT SQL Editor</div>
            <button type="button" class="set-btn" onclick="setOpen()">
              <span class="material-icons-outlined" id="settings">
                settings
              </span>
            </button>
            <div class="top-setting">
              <button type="button" class="set-close" onclick="setClose()">
                <span class="material-icons-outlined"> expand_less </span>
              </button>
              <form id="theme" class="forms">
                <div class="form-label">Theme:</div>
                <label>
                  <input
                    type="radio"
                    name="theme"
                    id="t1"
                    value="neat"
                    checked
                  />
                  <span>Light 1</span>
                </label>
                <label>
                  <input type="radio" name="theme" id="t2" value="default" />
                  <span>Light 2</span>
                </label>
                <label>
                  <input type="radio" name="theme" id="t3" value="monokai" />
                  <span>Dark 1</span>
                </label>
                <label>
                  <input
                    type="radio"
                    name="theme"
                    id="t4"
                    value="material-darker"
                  />
                  <span>Dark 2</span>
                </label>
                <label>
                  <input type="radio" name="theme" id="t5" value="seti" />
                  <span>Dark 3</span>
                </label>
              </form>
              <form id="size" class="forms">
                <div class="form-label">Size:</div>
                <label>
                  <input type="radio" name="size" value="medium" checked />
                  <span>Medium</span>
                </label>
                <label>
                  <input type="radio" name="size" value="small" />
                  <span>Small</span>
                </label>
                <label>
                  <input type="radio" name="size" value="large" />
                  <span>Large</span>
                </label>
                <label>
                  <input type="radio" name="size" value="x-large" />
                  <span>XL</span>
                </label>
                <label>
                  <input type="radio" name="size" value="xx-large" />
                  <span>XXL</span>
                </label>
              </form>
            </div>
          </div>
          <div class="edit" id="edit">
            <textarea id="code-input"></textarea>
          </div>
        </div>
        <div class="bottom">
          <div class="bot-head">
            <div class="status">
              <div class="statusName">STATUS</div>
              <div class="statusVal">Null</div>
            </div>
            <% if(!expired){ %>
            <div class="btns">
              <button type="button" onclick="retriveQuery(false)">
                Run Query <span class="material-icons"> play_arrow </span>
                <div class="loader-back" id="load1">
                  <div class="loader"></div>
                </div>
              </button>
              <button type="button" onclick="retriveQuery(true)">
                Submit Query
                <span class="material-icons">
                  keyboard_double_arrow_right
                </span>
                <div class="loader-back" id="load2">
                  <div class="loader"></div>
                </div>
              </button>
            </div>
            <%}%>
          </div>
          <div class="bot-content">
            <div class="output">
              <button class="collapsible">Your Output</button>
              <div class="content" id="out1">
                <table>
                  <tr>
                    <td>No Output</td>
                  </tr>
                </table>
              </div>
            </div>
            <div class="output">
              <button class="collapsible">Expected Output</button>
              <div class="content" id="out2">
                <table>
                  <table>
                    <tr>
                      <td>No Output</td>
                    </tr>
                  </table>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <div id="myModal" class="modal">
      <!-- Modal content -->
      <div class="modal-content">
        <span class="material-icons-round icon"> done_outline </span>
        <div class="modal-head">
          <span>Success!!</span>
        </div>
        <p id="Acontent">You have successfully solved the question</p>
        <div class="modal-value">-10 Points-</div>
        <span class="close" id="aclose">Close</span>
      </div>
    </div>
    <script>
      var modal = document.getElementById("myModal");

      // Get the <span> element that closes the modal
      var span = document.getElementById("aclose");

      // When the user clicks on <span> (x), close the modal
      span.onclick = function () {
        modal.style.display = "none";
      };

      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function (event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      };
    </script>
    <script>
      function setOpen() {
        document.querySelector(".top-setting").style.display = "flex";
      }
      function setClose() {
        document.querySelector(".top-setting").style.display = "none";
      }
      var editor = CodeMirror.fromTextArea(
        document.getElementById("code-input"),
        {
          lineNumbers: true,
          mode: "text/x-sql",
          theme: "neat",
          lineWrapping: true,
        }
      );
      const statusVal = document.querySelector(".statusVal");
      let inout = document.querySelector(".inout");
      let th = document.querySelectorAll("th");
      let td = document.querySelectorAll("td");
      let table = document.querySelectorAll("table");
      let bottom = document.querySelector(".bottom");
      let topHead = document.querySelector(".top-head");
      let left = document.querySelector(".left");
      let qhead = document.querySelector(".qhead");
      let editorpart = document.querySelector(".CodeMirror-scroll");
      let status = document.querySelector(".bot-head");
      let content = document.querySelectorAll(".content");
      let settings = document.getElementById("settings");
      document.getElementById("size").addEventListener("change", (e) => {
        editorpart.style.fontSize = e.target.value;
      });
      document
        .getElementById("theme")
        .addEventListener("change", function (event) {
          let str = event.target.value.toString();
          editor.setOption("theme", str);
          setCookie(str);
          if (str == "monokai") {
            settings.style.color = "rgb(245,245,245)";
            status.style.borderColor = "rgba(255,255,255,0.1)";
            document.body.style.background = "rgb(39,40,34)";
            document.body.style.color = "rgb(245,245,245)";
            qhead.style.color = "rgb(211,38,100)";
            inout.style.borderColor = "rgba(255,255,255,0.1)";
            inout.style.background = "rgba(255,255,255,0.2)";
            bottom.style.borderColor = "rgba(255,255,255,0.1)";
            topHead.style.borderColor = "rgba(255,255,255,0.1)";
            left.style.borderColor = "rgba(255,255,255,0.1)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            content.forEach((item) => {
              item.style.background = "rgb(85,85,85)";
            });
          } else if (str == "material-darker") {
            settings.style.color = "rgb(245,245,245)";
            qhead.style.color = "rgb(177,131,207)";
            document.body.style.background = "rgb(33,33,33)";
            document.body.style.color = "rgb(245,245,245)";
            inout.style.borderColor = "rgba(255,255,255,0.1)";
            inout.style.background = "rgba(255,255,255,0.2)";
            bottom.style.borderColor = "rgba(255,255,255,0.1)";
            topHead.style.borderColor = "rgba(255,255,255,0.1)";
            left.style.borderColor = "rgba(255,255,255,0.1)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            content.forEach((item) => {
              item.style.background = "rgb(85,85,85)";
            });
          } else if (str == "seti") {
            settings.style.color = "rgb(245,245,245)";
            status.style.borderColor = "rgba(255,255,255,0.1)";
            qhead.style.color = "rgb(206,184,96)";
            document.body.style.background = "rgb(21,23,24)";
            document.body.style.color = "rgb(245,245,245)";
            inout.style.borderColor = "rgba(255,255,255,0.1)";
            inout.style.background = "rgba(255,255,255,0.2)";
            bottom.style.borderColor = "rgba(255,255,255,0.1)";
            topHead.style.borderColor = "rgba(255,255,255,0.1)";
            left.style.borderColor = "rgba(255,255,255,0.1)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            content.forEach((item) => {
              item.style.background = "rgb(85,85,85)";
            });
          } else {
            settings.style.color = "black";
            status.style.borderColor = "rgba(36, 36, 36, 0.171)";
            document.body.style.background = "white";
            document.body.style.color = "rgb(37, 37, 37)";
            inout.style.borderColor = "rgba(36, 36, 36, 0.171)";
            inout.style.background = "rgba(36, 36, 36, 0.03)";
            bottom.style.borderColor = "rgba(36, 36, 36, 0.171)";
            topHead.style.borderColor = "rgba(36, 36, 36, 0.171)";
            left.style.borderColor = "rgba(36, 36, 36, 0.171)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(36, 36, 36, 0.171)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(36, 36, 36, 0.171)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(36, 36, 36, 0.171)";
            });
            content.forEach((item) => {
              item.style.background = "#f1f1f1";
            });
          }
          if (str == "default") {
            qhead.style.color = "rgb(138,35,152)";
          } else if (str == "neat") {
            qhead.style.color = "rgb(37,37,37)";
          }
        });

      var coll = document.getElementsByClassName("collapsible");
      var i;

      for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
          this.classList.toggle("active");
          var content = this.nextElementSibling;
          if (content.style.maxHeight) {
            content.style.maxHeight = null;
          } else {
            content.style.maxHeight = content.scrollHeight + "px";
          }
        });
      }
      const load1 = document.getElementById("load1");
      const load2 = document.getElementById("load2");
      function retriveQuery(submit) {
        if (submit) {
          load2.style.display = "block";
        } else {
          load1.style.display = "block";
        }
        let lines = document.querySelectorAll(".CodeMirror-line ");
        let queries = "";
        lines.forEach((line) => {
          queries += line.innerText;
          queries += "/*";
        });
        sendSubmission(queries, submit);
      }

      function jsonToTable(tdata) {
        let tkeys = Object.keys(tdata[0]);
        let table1 = document.createElement("table");
        let row = table1.insertRow();
        for (var i = 0; i < tkeys.length; i++) {
          let cell = row.insertCell();
          cell.innerHTML = tkeys[i];
        }
        for (var i = 0; i < tdata.length; i++) {
          let row = table1.insertRow();
          for (var j = 0; j < tkeys.length; j++) {
            let cell = row.insertCell();
            cell.innerHTML = tdata[i][tkeys[j]];
          }
        }
        return table1;
      }
      function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
      }

      if ("<%= data.questionSchema %>") {
        let schema = "<%= JSON.stringify(data.questionSchema) %>";
        schema = decodeHtml(schema);
        schema = JSON.parse(schema);
        let schemaTable = document.getElementById("schema");
        schema.forEach((item) => {
          let row = schemaTable.insertRow();
          let cell1 = row.insertCell();
          let cell2 = row.insertCell();
          cell1.innerHTML = item.Field;
          cell2.innerHTML = item.Type;
        });
      }

      function sendSubmission(queries, submit) {
        try {
          var url = "<%= serverUrl %>/validateSubmissionDB";
          $.ajax({
            async: false,
            url: url,
            headers: { Authorization: "<%= token %>" },
            type: "POST",
            data: JSON.stringify({
              tableName: "<%= data.tableName %>",
              rollNumber: "<%= username %>",
              questionId: "<%= data.questionId %>",
              questionHiddenOutput: "<%= jsString %>",
              dbSessionId: "<%= data.dbSessionId %>",
              sqlCode: queries,
              score: "<%= data.score %>",
              submit: submit,
            }),
            cache: false,
            contentType: "application/json; charset=utf-8",
            processData: false,
            dataType: "json",
            success: function (response) {
              console.log(response);
              let tdata = response.data.results[0];
              let tab1 = jsonToTable(tdata);
              let tdata2 = "<%= JSON.stringify(data.questionHiddenOutput) %>";
              const decodedString = decodeHtml(tdata2);
              const data = JSON.parse(decodedString);
              let tab2 = jsonToTable(data);
              let out1 = document.getElementById("out1");
              let out2 = document.getElementById("out2");
              out1.innerHTML = "";
              out1.appendChild(tab1);
              out2.innerHTML = "";
              out2.appendChild(tab2);
              if (submit) {
                load2.style.display = "none";
              } else {
                load1.style.display = "none";
              }
              document.querySelectorAll(".collapsible").forEach((item) => {
                item.click();
              });
              statusVal.style.color = "rgb(1,120,238)";
              statusVal.innerHTML = "Success (Run)";
              if (submit) {
                let as = "";
                if (response.data.state) {
                  statusVal.style.color = "rgb(72,195,118)";
                  statusVal.innerHTML = "Success";
                  as =
                    '<div class="modal-content"><span class="material-icons-round icon"> done_outline </span><div class="modal-head"><span>Success!!</span></div><p id="Acontent">You have successfully solved the question</p><div class="modal-value">-<%= data.score %> Points-</div><span class="close" id="aclose">Tap anywhare to close</span></div>';
                } else {
                  statusVal.style.color = "rgb(251,188,4)";
                  statusVal.innerHTML = "Incorrect Query";
                  as =
                    '<div class="modal-content"><span class="material-icons-round icon"> close </span><div class="modal-head"><span>Failed!!</span></div><p id="Acontent">Incorrect Query or Wrong Solution</p><div class="modal-value">-0 Points-</div><span class="close" id="aclose">Tap anywhare to close</span></div>';
                }
                var modal = document.getElementById("myModal");
                modal.innerHTML = as;
                modal.style.display = "block";
              }
            },
            error: function (error) {
              statusVal.style.color = "rgb(255,0,0)";
              statusVal.innerHTML = "Error (Run)";
              let as =
                '<div class="modal-content"><span class="material-icons-round icon"> close </span><div class="modal-head"><span>Failed!!</span></div><p id="Acontent">Incorrect Query or Wrong Solution</p><div class="modal-value">-0 Points-</div><span class="close" id="aclose">Tap anywhare to close</span></div>';
              if (submit) {
                statusVal.style.color = "rgb(255,0,0)";
                statusVal.innerHTML = "Error";
                load2.style.display = "none";
              } else {
                load1.style.display = "none";
              }
              if (submit) {
                var modal = document.getElementById("myModal");
                modal.innerHTML = as;
                modal.style.display = "block";
              }
            },
          });
        } catch (err) {
          if (submit) {
            load2.style.display = "none";
          } else {
            load1.style.display = "none";
          }
          let as =
            '<div class="modal-content"><span class="material-icons-round icon"> close </span><div class="modal-head"><span>Failed!!</span></div><p id="Acontent">Incorrect Query or Wrong Solution</p><div class="modal-value">-0 Points-</div><span class="close" id="aclose">Tap anywhare to close</span></div>';
          if (submit) {
            var modal = document.getElementById("myModal");
            modal.innerHTML = as;
            modal.style.display = "block";
            document.getElementById("Acontent").innerText =
              "Error submitting the query";
          }
        }
      }

      function setCookie(theme) {
        const d = new Date();
        d.setTime(d.getTime() + 100 * 24 * 60 * 60 * 1000);
        let expires = "expires=" + d.toUTCString();
        document.cookie =
          "displayBuildit =" + theme + ";" + expires + ";path=/";
      }
      function getCookie(cname) {
        let name = cname + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(";");
        for (let i = 0; i < ca.length; i++) {
          let c = ca[i];
          while (c.charAt(0) == " ") {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }
      window.onload = function () {
        setTimeout(() => {
          let str = getCookie("displayBuildit");
          editor.setOption("theme", str);
          if (str == "monokai") {
            settings.style.color = "rgb(245,245,245)";
            status.style.borderColor = "rgba(255,255,255,0.1)";
            document.body.style.background = "rgb(39,40,34)";
            document.body.style.color = "rgb(245,245,245)";
            qhead.style.color = "rgb(211,38,100)";
            inout.style.borderColor = "rgba(255,255,255,0.1)";
            inout.style.background = "rgba(255,255,255,0.2)";
            bottom.style.borderColor = "rgba(255,255,255,0.1)";
            topHead.style.borderColor = "rgba(255,255,255,0.1)";
            left.style.borderColor = "rgba(255,255,255,0.1)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            content.forEach((item) => {
              item.style.background = "rgb(85,85,85)";
            });
          } else if (str == "material-darker") {
            settings.style.color = "rgb(245,245,245)";
            qhead.style.color = "rgb(177,131,207)";
            document.body.style.background = "rgb(33,33,33)";
            document.body.style.color = "rgb(245,245,245)";
            inout.style.borderColor = "rgba(255,255,255,0.1)";
            inout.style.background = "rgba(255,255,255,0.2)";
            bottom.style.borderColor = "rgba(255,255,255,0.1)";
            topHead.style.borderColor = "rgba(255,255,255,0.1)";
            left.style.borderColor = "rgba(255,255,255,0.1)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            content.forEach((item) => {
              item.style.background = "rgb(85,85,85)";
            });
          } else if (str == "seti") {
            settings.style.color = "rgb(245,245,245)";
            status.style.borderColor = "rgba(255,255,255,0.1)";
            qhead.style.color = "rgb(206,184,96)";
            document.body.style.background = "rgb(21,23,24)";
            document.body.style.color = "rgb(245,245,245)";
            inout.style.borderColor = "rgba(255,255,255,0.1)";
            inout.style.background = "rgba(255,255,255,0.2)";
            bottom.style.borderColor = "rgba(255,255,255,0.1)";
            topHead.style.borderColor = "rgba(255,255,255,0.1)";
            left.style.borderColor = "rgba(255,255,255,0.1)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(255,255,255,0.1)";
            });
            content.forEach((item) => {
              item.style.background = "rgb(85,85,85)";
            });
          } else {
            settings.style.color = "black";
            status.style.borderColor = "rgba(36, 36, 36, 0.171)";
            document.body.style.background = "white";
            document.body.style.color = "rgb(37, 37, 37)";
            inout.style.borderColor = "rgba(36, 36, 36, 0.171)";
            inout.style.background = "rgba(36, 36, 36, 0.03)";
            bottom.style.borderColor = "rgba(36, 36, 36, 0.171)";
            topHead.style.borderColor = "rgba(36, 36, 36, 0.171)";
            left.style.borderColor = "rgba(36, 36, 36, 0.171)";
            th.forEach((item) => {
              item.style.borderColor = "rgba(36, 36, 36, 0.171)";
            });
            td.forEach((item) => {
              item.style.borderColor = "rgba(36, 36, 36, 0.171)";
            });
            table.forEach((item) => {
              item.style.borderColor = "rgba(36, 36, 36, 0.171)";
            });
            content.forEach((item) => {
              item.style.background = "#f1f1f1";
            });
          }
          if (str == "default") {
            qhead.style.color = "rgb(138,35,152)";
          } else if (str == "neat") {
            qhead.style.color = "rgb(37,37,37)";
          }
          if (str == "neat") {
            $("#t1").prop("checked", true);
          } else if (str == "default") {
            $("#t2").prop("checked", true);
          } else if (str == "monokai") {
            $("#t3").prop("checked", true);
          } else if (str == "material-darker") {
            $("#t4").prop("checked", true);
          } else {
            $("#t5").prop("checked", true);
          }
        }, 10);
      };
    </script>
    <script src="plugins/jQuery/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  </body>
</html>
